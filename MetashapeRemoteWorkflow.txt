### Workflow for Running Metashape on a Remote Server. This utilizes scripts included at https://github.com/wyattmillion/Coral3DPhotogram
#
##### 1. You must download the preferred Metashape (professional, standard) from the Agisoft website onto the remote server you are using.
# 		a. Download from https://www.agisoft.com/downloads/installer/ to local computer then copy to remote server

scp $local/directory/metashape-pro_1_5_3_amd64.tar.gz username@to_host:/remote/bin

# 		b. download software directly from https://www.agisoft.com/downloads/installer/ to remote server

wget

#### 2. Decompress metashape-pro to create the metashape-pro directory

tar xvzf metashape-prp_1_5_3_amd64.tar.gz

###### 3. Create the offline activation request to make Metashape executable from the commandline, this will require the activation code 
#   	 received when purchase/free trial activation

cd metashape-pro
./photoscan.sh  --activate-offline 11111-22222-33333-44444-55555 /var/tmp/request.act

#  This will create the file request.act in var/temp/. You must send this file to support@agisoft.com and wait for their response
#  with a license file (.lic). Copy this file to the metashape-pro directory. Run metashape.sh to activate the licensed version of
#  of Metashape

scp $var/temp/request.act local/directory # then send to support@agisoft.com

scp local/directory/license_file_name.lic username@to_host:remote/bin/metashape-pro

bash metashape.sh

##### 4. Directing Metashape to photo sets for each separate chuck you wish to build in sequence. Maintain directories of each photo set
#		within a "Main" directory
#
#Main/Photo_Set1
#Main/Photo_Set2
#Main/Photo_Set3

# Create list of absolute file paths to each of the directories containing a photo set within the "main" directory

ls -d -1 $PWD/**> FragDirs.txt

# In the Main directory there should now be a FragDirs.txt file listing the absolute paths of Set1, Set2, and Set3 â€¦

cat FragDirs.txt #to double check all paths are there

##### 5. Generate python scripts that will run Metashape for each photo set that you included in FragDirs.txt
## best to do this in the location where the Metashape program was saved, i.e. bin/metashape-pro/

#  Create base Metashape script that will act as a template for each unique photo set, here is an example. See additional files for
#  details on metashape commands and options for building models

nano 

import os
#import sys
import Metashape
import glob
#dir = sys.argv[1]
#print(dir)
doc = Metashape.app.document
chunk = Metashape.app.document.addChunk()
os.chdir("DIR")
cwd = os.getcwd() #print current working directory and save as 'cwd'
print(cwd)
cwd = cwd.split("/") #split the name into a list by the '/'
doc.save(cwd[-2]+'_'+cwd[-1]+'.psz') #names the output by the last 2 names in the cwd string
chunk = doc.chunk
x=glob.glob("/home/kenkel/Acerv3Dproj/rawPhotos/"+cwd[-2]+"/"+cwd[-1]+"/*.JPG") #.JEP will change with format your pictures are in
chunk.addPhotos(x) #change
chunk.matchPhotos(accuracy=Metashape.HighAccuracy, generic_preselection=True, keypoint_limit=40000, tiepoint_limit=4000) #chooses the aligning photos accuracy
chunk.alignCameras(adaptive_fitting=True)#function to align photos
chunk.buildDepthMaps(quality=Metashape.HighQuality, filter=Metashape.MildFiltering) #builds high quality dense cloud, ability to change quality and depth filtering (best to keep it at "MILD" for the coral images)
chunk.buildDenseCloud(point_colors = True)
chunk.buildModel(surface=Metashape.Arbitrary, source=Metashape.DenseCloudData, interpolation=Metashape.EnabledInterpolation, face_count=Metashape.HighFaceCount) #the "build mesh" step, 
chunk.buildUV(mapping=Metashape.GenericMapping) #part of build texture step
chunk.buildTexture(blending=Metashape.MosaicBlending, size=25000, fill_holes=True)#rest of build texture step
chunk.exportModel(cwd[-2]+cwd[-1]+'_'+"model.obj", binary=True, precision=6, texture_format=Metashape.ImageFormatJPEG, texture=True, normals=True, colors=True, cameras=True, markers=True, udim=False, strip_extensions=False, format=Metashape.ModelFormatOBJ) 
exportReport(/home/kenkel/Acerv3Dproj/rawPhotos/+cwd[-2]+"/"+cwd[-1])
doc.save()

# Save this as metashapeBase.py

# Create a bash script to generate unique python scripts for each photo set listed in FragDirs.txt using metashapeBase.py as a tempelate

nano

#!/bin/bash
# creates individual metashape scripts for 
# submitting each job to the job schedule
# this version works on AWS EC2 with SGE
# usage: batch.sh script list jobname

LOC=$1

if [ "$#" -ne 1 ]
	then
	echo ""
	echo "Usage: Meta_expand.sh filepath/FragDirs.txt"
	echo "Where"
	echo "	filepath:   absolute path to location of FragDirs.txt"
	echo "	FragDirs.txt is a list of absolute file paths for "
	echo "	individual photo sets within Main directory"
	echo "For example. 'Meta_expand.sh /home/Main/FragDirs.txt'"
	echo ""
	exit
fi

filelines=`cat $LOC`

#echo $LOC

for line in $filelines; do
#    echo $line;
#    echo test;
    IFS='/' read -ra NAME <<< "$line";
    name1="${NAME[3]}"; #takes specific section of absolute path to be used as a name for the newly created scripts
#   name2="${NAME[2]}"; # add more names to further specify photoset scripts
    while read script; do
        echo ${script//DIR/$line};
    done < metashapeBase.py > ${name1}.py
done

## Write out and save as Meta_expand.sh

#make Meta_expand.sh executable

chmod +x Meta_expand.sh

## Generate unique photo set Python Scripts using the absolute path to FragdDirs.txt 

./Meta_expand.sh /home/Main/FragDirs.txt

## Make new Python scripts executable 
 
#### 6. Run Metashape to build each photo set in sequence without further input from the user

# Create bash script that will feed the unique Python scripts for each photo set on after another until all models are built

nano

#!/bin/sh

scripts=`ls *Set*.py` #use combination of wildcards to call scripts for the photo sets you with to use in the run

for script in $scripts; do

    bash metashape.sh -r $script; #runs Metashape for one photo set at a time 

done

#Write out and save as metashapeLoop.sh

#  Begin automated Metashape model building

metashapeLoop.sh 

## redirect output to a txt file for trouble shooting reasons

metashapeLoop.sh > output.txt
